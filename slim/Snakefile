import itertools
from functools import partial
import numpy as np
np.random.seed(1)

null = "NULL" # for null parameters to slim

#SLIM = "/home/vsb/src/SLiM_build/slim "
SLIM = 'slim '
DATADIR = "../data/slim_sims/"

## Parameters
reps = range(50)

ouputs = ["log.tsv.gz"]

## Functions

def param_grid(**kwargs):
  params = []
  for param, values in kwargs.items():
    if len(values):
      params.append([(param, v) for v in values])
    else:
      params.append([(param, '')])
  return list(map(dict, itertools.product(*params)))

def filename_pattern(base, params):
  param_str = [v + '{' + v + '}' for v in params]
  pattern = base + '_'.join(param_str) + '_{{output}}'
  return pattern

def slim_call(params, slim_cmd="slim"):
  call_args = [f"-d {p}={{wildcards.{p}}}" for p in params]
  return f"{slim_cmd} " + " ".join(call_args)
  

## ===== Gamma DFE =====
nonwf_params = ('rep', 'Vs', 'fitfunc', 'synergistic', 'dfe', 'shape', 'optimasd', 
                'optimabm', 'K', 'alpha', 's', 'h', 'muT', 'muN', 'muD', 'rbp')

# must be in same order as the SLiM params
dfe_params = dict(rep=reps,
                  Vs=[null],
                  fitfunc=[null],
                  synergistic=['F'],
                  dfe=['T'],
                  shape = [0.19],
                  optimasd=[null],
                  optimabm=[null],
                  K = [100, 500, 1000, 5000, 10000],
                  alpha=[0],
                  s = [0.014],
                  h = [0.3],
                  muT = [0],
                  muN = [5e-8],
                  # if U is 2, then U / (2 * region_length) = 1e-8 
                  # if region_length = 100e6
                  muD = [1e-08, 1e-09],
                  rbp = [1e-8])

dfe_param_list = list(param_grid(**dfe_params))
nonwf_dfe_pattern = filename_pattern(DATADIR + 'nonwf/dfe_', dfe_params)

#print(nonwf_dfe_pattern)
#print(dfe_param_list)


nonwf_dfe_results = [nonwf_dfe_pattern.format(**p).format(output='log.tsv.gz') 
                     for p in dfe_param_list]
#print(nonwf_dfe_pattern)
#print( nonwf_dfe_pattern.replace("{{output}}", "log.tsv.gz"))

rule nonwf_dfe_all:
  input:
    nonwf_dfe_results

rule nonwf_dfe:
  input:
    "polygenic_nonwf.slim"
  output:
    nonwf_dfe_pattern.replace("{{output}}", "log.tsv.gz"),
  shell:
    f"mkdir -p {DATADIR}/nonwf/ \n" + slim_call(dfe_params, SLIM) + " {input} "


## ===== Setup =====

rule all:
	input:
		nonwf_dfe_results

